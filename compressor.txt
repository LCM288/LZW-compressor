byte:	bitset<8>;
bit:	bitset<1>;

bytes: vector<byte>;
bits: vector<bit>;

node:
	int val;
	vector<node*> child(256);
	
trie:
	private:
		node* cur, root;				// the current position and root in the trie
		static int byte2int(byte a_byte) const;		// convert byte to int
	public:
		bool exist_child(byte next_byte) const;		// check if current node has a corresponding child
		void add_new_node(byte next_byte);		// add a new child for current node
		void go_to_child(byte next_byte);		// change current position to the child node
		void reset();					// reset current position to root

dictionary:
	private:
		int _size;					// size of the dictionary
		vector<bytes> words;				// corresponding bytes of the index
		trie dictionary_tree;				// a trie storing the dictionary
		bool check_exist(byte next_byte) const;		// check if adding next_byte still exists in dictionary_tree
		void update_cur(byte next_byte);		// update current position of dictionary_tree
	public:
		int size() const;				// return the size of the dictionary
		bits encode(byte next_byte)			// return the next encoded bits
		bytes decode(int val)				// return the next decoded bytes

encode:
	private:
		ifstream input;
		ofstream output;
		void write(bits output_bits) const;		// write to the output file
		byte read() const;				// read from the input file
	public:
		void start_encode()				// start decode

decode:
	private:
		ifstream input;
		ofstream output;
		void write(byte output_byte) const;		// write to the output file
		bits read(int no_of_bits) const;		// read from the input file
	public:
		void start_decode()				// start decode
