#include<cstring>

#ifndef AES_H
#define AES_H

class AES {
	protected:
		bytes cipher_key, round_keys[15];					// the cipher key and 15 round keys (matrix form)
		bytes block;										// the block being processed
		static const byte rcon[9];							// the rcon values
		static const bytes forward_mc, inverse_mc;			// the mixcolumns matrix
		static const bytes forward_S, inverse_S;			// the S tables
		static unsigned int rightrotate(unsigned int, int);	// right rotate
		static bytes SHA256(const char*);					// hashing password into 256 bit
		void key_schedule();								// the key schedule
		void sub_bytes();									// the sub bytes step
		void shift_rows();									// the shift rows step
		void mix_columns();									// the mix columns step
		void add_round_key(bytes);							// the add round key step
		void r_sub_bytes();									// the reverse sub bytes step
		void r_shift_rows();								// the reverse shift rows step
		void r_mix_columns();								// the reverse mix columns step
		void r_add_round_key(bytes);						// the reverse add round key step
};

const byte AES::rcon[9] = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};

const bytes AES::forward_S = {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
							  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
							  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
							  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
							  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
							  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
							  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
							  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
							  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
							  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
							  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
							  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
							  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
							  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
							  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
							  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
							  
const bytes AES::inverse_S = {0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
							  0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
							  0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
							  0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
							  0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
							  0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
							  0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
							  0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
							  0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
							  0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
							  0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
							  0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
							  0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
							  0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
							  0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
							  0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D};

unsigned int AES::rightrotate(unsigned int x, int c) {
	return (x >> c) | (x << (32 - c));
}

bytes AES::SHA256(const char* password) {
	bits message;
	long long l = strlen(password);
	for (int i = 0; i < l; i++) {
		byte tmp = byte(password[i]);
		for (int j = 1 << 7; j; j /= 2) {
			message.push_back(tmp / j);
			tmp %= j;
		}
	}
	message.push_back(1);
	while (message.size() % 512 != 448)
		message.push_back(0);
	l *= 8;
	for (unsigned long long i = 1ull << 63; i; i /= 2) {
		message.push_back(l / i);
		l %= i;
	}
	unsigned int H[] = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};
	unsigned int k[] = {0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
						0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
						0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
						0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
						0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
						0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
						0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
						0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};
	for (int i = 0; i < message.size(); i += 512) {
		unsigned int w[64];
		for (int j = 0; j < 16; j++) {
			w[j] = 0;
			for (int k = 0; k < 32; k++) 
				w[j] = w[j] * 2 + (message[i + j * 32 + k] ? 1 : 0);
		}
		for (int j = 16; j < 64; j++) {
			unsigned int s0 = rightrotate(w[j - 15], 7) ^ rightrotate(w[j - 15], 18) ^ (w[j - 15] >> 3);
			unsigned int s1 = rightrotate(w[j - 2], 17) ^ rightrotate(w[j - 2], 19) ^ (w[j - 2] >> 10);
			w[j] = w[j - 16] + s0 + w[j - 7] + s1;
		}
		unsigned int a = H[0];
		unsigned int b = H[1];
		unsigned int c = H[2];
		unsigned int d = H[3];
		unsigned int e = H[4];
		unsigned int f = H[5];
		unsigned int g = H[6];
		unsigned int h = H[7];
		for (int j = 0; j < 64; j++) {
			unsigned int s1 = rightrotate(e, 6) ^ rightrotate(e, 11) ^ rightrotate(e, 25);
			unsigned int ch = (e & f) ^ ((~e) & g);
			unsigned int temp1 = h + s1 + ch + k[j] + w[j];
			unsigned int s0 = rightrotate(a, 2) ^ rightrotate(a, 13) ^ rightrotate(a, 22);
			unsigned int maj = (a & b) ^ (a & c) ^ (b & c);
			unsigned int temp2 = s0 + maj;
			h = g;
			g = f;
			f = e;
			e = d + temp1;
			d = c;
			c = b;
			b = a;
			a = temp1 + temp2;
		}
		H[0] += a;
		H[1] += b;
		H[2] += c;
		H[3] += d;
		H[4] += e;
		H[5] += f;
		H[6] += g;
		H[7] += h;
	}
	bytes hashed_message;
	for (int i = 0; i < 8; i++) {
		for (int j = 1 << 24; j; j /= 1 << 8) {
			hashed_message.push_back(H[i] / j);
			H[i] %= j;
		}
	}
	return hashed_message;
}

void AES::key_schedule() {
	int turn = 1;
	while(cipher_key.size() < 240) {
		byte tmp[4];
		for (int i = 0; i < 4; i++)
			tmp[i] = cipher_key[int(cipher_key.size()) + i - 4];
		if (cipher_key.size() % 32 == 0) {
			byte tmp2 = tmp[0];
			tmp[0] = tmp[1];
			tmp[1] = tmp[2];
			tmp[2] = tmp[3];
			tmp[3] = tmp2;
			for (int i = 0; i < 4; i++)
				tmp[i] = forward_S[tmp[i]];
			tmp[0] ^= rcon[turn++];
		}
		else if (cipher_key.size() % 32 == 16) {
			for (int i = 0; i < 4; i++)
				tmp[i] = forward_S[tmp[i]];
		}
		for (int i = 0; i < 4; i++)
			cipher_key.push_back(cipher_key[int(cipher_key.size()) - 32] ^ tmp[i]);
	}
	for (int i = 0; i < 15; i++)
		round_keys[i] = bytes(cipher_key.begin() + 16 * i, cipher_key.begin() + 16 * i + 16);
}

void AES::sub_bytes(){
	for (int i = 0; i < 16; i++)
		block[i] = forward_S[block[i]];
}

void AES::shift_rows(){
	bytes tmp;
	tmp = block[4]; // rotate over 1 byte
	block[4] = block[5];
	block[5] = block[6];
	block[6] = block[7];
	block[7] = tmp;
	tmp = block[8]; // rotate over 2 byte
	block[8] = block[10];
	block[10] = tmp;
	tmp = block[9];
	block[9] = block[11];
	block[11] = tmp;
	tmp = block[12]; // rotate over 3 byte
	block[12] = block[15];
	block[15] = block[14];
	block[14] = block[13];
	block[13] = tmp;
}

void AES::mix_columns(){
	bytes tem[4];		// save the new value in tem first
	for (int i =0;i<4;i++){
		tem[0] = 2*block[i*4]^3*block[i*4+1]^1*block[i*4+2]^1*block[i*4+3];	//2 3 1 1
		tem[1] = 1*block[i*4]^2*block[i*4+1]^3*block[i*4+2]^1*block[i*4+3];	//1 2 3 1
		tem[2] = 1*block[i*4]^1*block[i*4+1]^2*block[i*4+2]^3*block[i*4+3];	//1 1 2 3
		tem[3] = 3*block[i*4]^1*block[i*4+1]^1*block[i*4+2]^2*block[i*4+3];	//3 1 1 2
		block[i*4] = tem[0];
		block[i*4+1] = tem[1];
		block[i*4+2] = tem[2];
		block[i*4+3] = tem[3];
	}
}

void AES::add_round_key(int turn){
	for (int i = 0; i < 16; i++)
		block[i] = block[i]^round_keys[turn][i];	// xor with round keys 1-10
}

void AES::r_sub_bytes(){
	for (int i = 0; i < 16; i++)
		block[i] = inverse_S[block[i]];
}

void AES::r_shift_rows(){
	bytes tmp;
	tmp = block[12]; // rotate over 1 byte (reverse of rotate over 3 byte)
	block[12] = block[13];
	block[13] = block[14];
	block[14] = block[15];
	block[15] = tmp;
	tmp = block[8]; // rotate over 2 byte (reverse of rotate over 2 byte)
	block[8] = block[10];
	block[10] = tem;
	tmp = block[9];
	block[9] = block[11];
	block[11] = tem;
	tmp = block[4]; // rotate over 3 byte (reverse of rotate over 1 byte)
	block[4] = block[7];
	block[7] = block[6];
	block[6] = block[5];
	block[5] = tmp;
}

void AES::r_mix_columns(){
	bytes tem[4];
	for (int i = 0;i < 4; i++){
		tem[0] = 14*block[i*4]^11*block[i*4+1]^13*block[i*4+2]^9*block[i*4+3];	//14 11 13 09
		tem[1] = 9*block[i*4]^14*block[i*4+1]^11*block[i*4+2]^13*block[i*4+3];	//09 14 11 13
		tem[2] = 13*block[i*4]^9*block[i*4+1]^14*block[i*4+2]^11*block[i*4+3];	//13 09 14 11
		tem[3] = 11*block[i*4]^13*block[i*4+1]^9*block[i*4+2]^14*block[i*4+3];	//11 13 09 14
		block[i*4] = tem[0];
		block[i*4+1] = tem[1];
		block[i*4+2] = tem[2];
		block[i*4+3] = tem[3];
	}
}

void AES::r_add_round_key(int turn){
	add_round_key(turn);
}

#endif
