byte:	bitset<8>;
bit:	bitset<1>;

bytes: vector<byte>;
bits: vector<bit>;

code: same as (int) but require explicit type case

node:
	code val;
	map<byte, node*> child;
	node();
	node(code set_val);
	~node();
	
trie:
	private:
		node* cur, root;				// the current position and root in the trie
	public:
		int get_val() const;				// get value of current position
		bool exist_child(byte next_byte) const;		// check if current node has a corresponding child
		void add_new_node(byte next_byte);		// add a new child for current node
		void go_to_child(byte next_byte);		// change current position to the child node
		void reset();					// reset current position to root
		void reconstruct();				// reconstruct the trie
		trie();						// constructor
		~trie();					// destructor

dictionary:
	private:
		static const int reconstruct_size = 65536;	// reconstruct size
		int size, len;					// size of the dictionary, length of bits
		bytes cur;					// cur bytes
		vector<bytes> words;				// corresponding bytes of the index
		trie dictionary_tree;				// a trie storing the dictionary
		bool check_exist(byte next_byte) const;		// check if adding next_byte still exists in dictionary_tree
		void update_cur(byte next_byte);		// update current position of dictionary_tree
		void add_entry(byte next_byte);			// add new entry to dictionary_tree
		static bits code2bits(code val) const;		// convert integer to bits
		static code bits2code(bits raw) const;		// convert bits to code
		void increase_size();				// increase size and len
		void reconstruct();				// reconstruct the dictionary
	public:
		int get_size() const{ return size; };
		int next_length() const;			// return the next encoded bits' length
		bits encode(byte next_byte)			// return the next encoded bits
		bytes decode(bits raw)				// return the next decoded bytes
		dictionary();					// constructor

encode:
	private:
		encrypt encryption;				// encryption
		ifstream input;					// input file stream
		ofstream output;				// output file stream
		std::streampos begin, end;			// begin and end position of the input file
		long long input_size, output_size;		// size of input and output file
		bits buffer					// store the bits that have not been output
		dictionary dict;				// the dictionary
		void write(bytes output_bytes);			// add a specific byte to be encrypted ** changed
		void write(bits output_bits);			// write to output file
		byte read();					// read from input file
	public:
		void start_encode();						// start decode ** changed
		encode(const char* input_file, const char* output_file);	// constructor

decode:
	private:
		decrypt decryption;				// decryption
		ifstream input;					// input file stream
		ofstream output;				// output file stream
		std::streampos begin, end;			// begin and end position of the input file
		long long input_size, output_size;		// size of input and output file
		bits buffer;					// store the bits that have not been input
		dictionary dict;				// the dictionary
		void write(byte output_byte);			// write to output file
		void write(bytes output_bytes);			// write to output file
		byte read();					// read a decrypted byte ** changed
		bits read(int no_of_bits);			// read from input file
	public:
		void start_decode()						// start decode ** changed
		decode(const char* input_file, const char* output_file);	// constructor

AES:
	protected:
		static const bytes rcon[10];			// the rcon values
		static const bytes forward_mc, inverse_mc;	// the mixcolumns matrix
		static const bytes forward_S, inverse_S;	// the S tables
		bytes cipher_key, round_keys[10];		// the cipher key and 10 round keys (matrix form)
		bytes block;					// the block being processed
		int round;					// the current round
		void key_schedule();				// the key schedule
		static bytes hash?(const char* password);	// hashing password into 128 bit
		void sub_bytes();				// the sub bytes step
		void shift_rows();				// the shift rows step
		void mix_columns();				// the mix columns step
		void add_round_key();				// the add round key step
		void r_sub_bytes();				// the reverse sub bytes step
		void r_shift_rows();				// the reverse shift rows step
		void r_mix_columns();				// the reverse mix columns step
		void r_add_round_key();				// the reverse add round key step

encrypt: public AES
	private:
		ofstream output;				// output file stream
		void encrypt_n_write();				// encrypt the block and write to file
	public:
		void add_to_encrypt(byte byte_to_encrypt);		// add the next byte to encrypt
		bool finished();					// return true if block is empty
		encrypt(const char* password, const char* output_file)	// constructor
		
decrypt: public AES
	private:
		ifstream input;					// input file stream
		void read_n_decrypt();				// read a block from file and decrypt
	public:
		bytes get_next_decrypted();				// get the next decrypted byte
		bool finished();					// return true if block is empty
		decrypt(const char* password, const char* input_file)	// constructor
